}
legend("top",legend=colnames(TS)[-1],col=colVect,lty=1,horiz=T,bty="n")
#
par(mfrow=c(1,1))
pdf(paste(output,"/fit.pdf",sep=""))
#
par(mfrow=c(1,1),mar=c(5,5,0,0),oma=c(0,0,1,1))
#
colVect = c("green","blue","red")
plot(TS[,1],TS[,2], pch=16, ylim=c(0,3), cex=0,xlab="Time",ylab="Density")
for(i in 2:4)
{
points(TS[,1],TS[,i], pch=16, col=colVect[i-1])
polygon(x=c(Ybar_q05[,1],rev(Ybar_q05[,1])), y=c(Ybar_q05[,i],rev(Ybar_q95[,i])), border=NA, col=grey(0.75,alpha=0.5))
lines(Ybar_MaP[,1],Ybar_MaP[,i], col=colVect[i-1])
lines(Ybar_mean[,1],Ybar_mean[,i], col=colVect[i-1])
}
legend("top",legend=colnames(TS)[-1],col=colVect,lty=1,horiz=T,bty="n")
#
par(mfrow=c(1,1))
#
dev.off()
##
## EFFECTS
## compute per-capita growth rate effects and contributions
rhat_pred     = t(apply(Ybar_MaP, 1, function(x) 1/x[-1] * unlist(model.dYdt(t = x[1], Y = x[-1], Beta = MaP[idx_Beta()]))))
ddx.rhat_pred = t(apply(Ybar_MaP, 1, function(x) model.ddx.dYdt(t = x[1], Y = x[-1], Beta = MaP[idx_Beta()])))
geber_pred    = t(apply(Ybar_MaP, 1, function(x) model.ddx.dYdt(t = x[1], Y = x[-1], Beta = MaP[idx_Beta()]) * unlist(model.dYdt(t = x[1], Y = x[-1], Beta = MaP[idx_Beta()]))))
## figure
pdf(paste(output,"/effects.pdf",sep=""))
#
layout(mat = matrix(1:(N*3),nrow=3))
colVect = c("green","blue","red")
#
for(i in 1:N)
{
## per-capita growth rate
plot(1:10,xlim=c(20,50)-1,ylim=c(-1,1),cex=0,xlab="Time",ylab="Growth rate",cex.lab=1.5)
#
t = TS[,1] + 19
lines(t,rhat_pred[,i],col=colVect[i])
#
t = t_true
lines(t,rhat_true[,i],col=colVect[i],lty=2)
#
## effects
plot(1:10,xlim=c(20,50)-1,ylim=c(-1,1)*3,cex=0,xlab="Time",ylab="Effects",cex.lab=1.5)
#
t = TS[,1] + 19
lines(t,ddx.rhat_pred[,1]*0,lty=2)
lines(t,ddx.rhat_pred[,1+(i-1)*N],col="green")
lines(t,ddx.rhat_pred[,2+(i-1)*N],col="blue")
lines(t,ddx.rhat_pred[,3+(i-1)*N],col="red")
#
t = t_true
lines(t,ddx.rhat_true[,1+(i-1)*N],col="green",lty=2)
lines(t,ddx.rhat_true[,2+(i-1)*N],col="blue",lty=2)
lines(t,ddx.rhat_true[,3+(i-1)*N],col="red",lty=2)
#
legend("bottom",legend=colnames(TS)[-1],col=colVect,lty=1,horiz=T,bty="n")
#
## geber
plot(1:10,xlim=c(20,50)-1,ylim=c(-1,1),cex=0,xlab="Time",ylab="Contributions",cex.lab=1.5)
#
t = TS[,1] + 19
lines(t,geber_pred[,1]*0,lty=2)
lines(t,geber_pred[,1+(i-1)*N],col="green")
lines(t,geber_pred[,2+(i-1)*N],col="blue")
lines(t,geber_pred[,3+(i-1)*N],col="red")
#
legend("bottom",legend=colnames(TS)[-1],col=colVect,lty=1,horiz=T,bty="n")
}
par(mfrow=c(1,1))
#
dev.off()
#
###
############
## OUTPUT ##
############
## goal: store results
## save predictions
results_NODE = list("t"=TS[,1]+19, "Yhat_p"=rhat_pred, "ddx.Yhat_p"=ddx.rhat_pred, "Geber_p"=geber_pred)
save(results_NODE,file=paste(output,"/results_NODE.RData",sep=""))
## figure
pdf(paste(output,"/fit.pdf",sep=""))
#
par(mfrow=c(1,1),mar=c(5,5,0,0),oma=c(0,0,1,1))
#
colVect = c("green","blue","red")
plot(TS[,1],TS[,2], pch=16, ylim=c(0,3), cex=0,xlab="Time",ylab="Density")
for(i in 2:4)
{
points(TS[,1],TS[,i], pch=16, col=colVect[i-1])
polygon(x=c(Ybar_q05[,1],rev(Ybar_q05[,1])), y=c(Ybar_q05[,i],rev(Ybar_q95[,i])), border=NA, col=grey(0.75,alpha=0.5))
lines(Ybar_MaP[,1],Ybar_MaP[,i], col=colVect[i-1])
lines(Ybar_mean[,1],Ybar_mean[,i], col=colVect[i-1],lty=2)
}
legend("top",legend=colnames(TS)[-1],col=colVect,lty=1,horiz=T,bty="n")
#
par(mfrow=c(1,1))
#
dev.off()
## figure
pdf(paste(output,"/fit.pdf",sep=""))
#
par(mfrow=c(1,1),mar=c(5,5,0,0),oma=c(0,0,1,1))
#
colVect = c("green","blue","red")
plot(TS[,1],TS[,2], pch=16, ylim=c(0,3), cex=0,xlab="Time",ylab="Density")
for(i in 2:4)
{
points(TS[,1],TS[,i], pch=16, col=colVect[i-1])
polygon(x=c(Ybar_q05[,1],rev(Ybar_q05[,1])), y=c(Ybar_q05[,i],rev(Ybar_q95[,i])), border=NA, col=grey(0.75,alpha=0.5))
lines(Ybar_MaP[,1],Ybar_MaP[,i], col=colVect[i-1],lty=2)
lines(Ybar_mean[,1],Ybar_mean[,i], col=colVect[i-1])
}
legend("top",legend=colnames(TS)[-1],col=colVect,lty=1,horiz=T,bty="n")
#
par(mfrow=c(1,1))
#
dev.off()
setwd("~/Documents/GitHub/NODERGM/examples/Bonnaffe_2022/MEE/v0_0/figures/scripts/NODE_GM_benchmark/ODE2")
## model properties
N = ncol(TS) - 1
## define model.dYdt
model.dYdt = function(t, Y, Beta) model.dYdt_ODE2(t, Y, Beta, I=N, O=N)
model.ddx.dYdt = function(t, Y, Beta) model.ddx.dYdt_ODE2(t, Y, Beta, I=N, O=N)
n_Beta = n_Beta_ODE2(I=N, O=N)
model.predict = model.predict_ODE
output = "out"
## fixed input
idx_Y_0   = function() 1:N
idx_Sigma = function()  N + 1:N
idx_Beta  = function()  N +   N + 1:n_Beta
n_params = length(idx_Y_0()) + length(idx_Sigma()) + length(idx_Beta())
## check
Y_0   = as.numeric(TS[1,-1])
Beta  = runif(n_Beta,-.001,.001)
Sigma = rep(1,N)
TS_pred = model.predict(times = TS[,1], Y_0 = Y_0, Beta = Beta)
model.dLogPost(TS,Y_0,Beta,Sigma)
model.dLogPost_wrapper(TS,c(log(Y_0),log(Sigma),Beta))
model.dLogPost_wrapper(TS,model.initiate())
## load chains
chainList = chainList.read(output)
chainList_thinned = chainList
## untransform
for(l in 1:length(chainList_thinned))
{
chainList_thinned[[l]][,-1][,idx_Y_0()]  = exp(chainList_thinned[[l]][,-1][,idx_Y_0()])
chainList_thinned[[l]][,-1][,idx_Sigma()] = exp(chainList_thinned[[l]][,-1][,idx_Sigma()])
chainList_thinned[[l]][,-1][,idx_Beta()]  = chainList_thinned[[l]][,-1][,idx_Beta()]
}
## group chains
chainList_thinned = chainList.unlist(chainList_thinned)
chainList_thinned = chainList_thinned[!is.na(chainList_thinned[,1]),]
chainList_thinned = chainList_thinned[chainList_thinned[,1]>quantile(x=chainList_thinned[,1], p=0.75),]
chainList_thinned = list(chainList_thinned)
## MaP prediction
MaP  = as.numeric(chainList.argmaxPost(chainList_thinned))
Y_0  = MaP[idx_Y_0()]
Beta = MaP[idx_Beta()]
Ybar_MaP = model.predict(times = TS[,1], Y_0 = Y_0, Beta = Beta)
#
## ensemble predictions
Ybar_ensemble = chainList.apply(chainList_thinned,f = function(x) model.predict(times = TS[,1], Y_0 = x[-1][idx_Y_0()], Beta = x[-1][idx_Beta()]))
Ybar_mean = matrix(Ybar_ensemble[[1]],ncol=N+1)
Ybar_q05  = matrix(Ybar_ensemble[[2]],ncol=N+1)
Ybar_q95  = matrix(Ybar_ensemble[[3]],ncol=N+1)
## figure
pdf(paste(output,"/fit.pdf",sep=""))
#
par(mfrow=c(1,1),mar=c(5,5,0,0),oma=c(0,0,1,1))
#
colVect = c("green","blue","red")
plot(TS[,1],TS[,2], pch=16, ylim=c(0,3), cex=0,xlab="Time",ylab="Density")
for(i in 2:4)
{
points(TS[,1],TS[,i], pch=16, col=colVect[i-1])
polygon(x=c(Ybar_q05[,1],rev(Ybar_q05[,1])), y=c(Ybar_q05[,i],rev(Ybar_q95[,i])), border=NA, col=grey(0.75,alpha=0.5))
lines(Ybar_MaP[,1],Ybar_MaP[,i], col=colVect[i-1],lty=2)
lines(Ybar_mean[,1],Ybar_mean[,i], col=colVect[i-1])
}
legend("top",legend=colnames(TS)[-1],col=colVect,lty=1,horiz=T,bty="n")
#
par(mfrow=c(1,1))
#
dev.off()
##
## EFFECTS
## compute per-capita growth rate effects and contributions
rhat_pred     = t(apply(Ybar_MaP, 1, function(x) 1/x[-1] * unlist(model.dYdt(t = x[1], Y = x[-1], Beta = MaP[idx_Beta()]))))
ddx.rhat_pred = t(apply(Ybar_MaP, 1, function(x) model.ddx.dYdt(t = x[1], Y = x[-1], Beta = MaP[idx_Beta()])))
geber_pred    = t(apply(Ybar_MaP, 1, function(x) model.ddx.dYdt(t = x[1], Y = x[-1], Beta = MaP[idx_Beta()]) * unlist(model.dYdt(t = x[1], Y = x[-1], Beta = MaP[idx_Beta()]))))
## figure
pdf(paste(output,"/effects.pdf",sep=""))
#
layout(mat = matrix(1:(N*3),nrow=3))
colVect = c("green","blue","red")
#
for(i in 1:N)
{
## per-capita growth rate
plot(1:10,xlim=c(20,50)-1,ylim=c(-1,1),cex=0,xlab="Time",ylab="Growth rate",cex.lab=1.5)
#
t = TS[,1] + 19
lines(t,rhat_pred[,i],col=colVect[i])
#
t = t_true
lines(t,rhat_true[,i],col=colVect[i],lty=2)
#
## effects
plot(1:10,xlim=c(20,50)-1,ylim=c(-1,1)*3,cex=0,xlab="Time",ylab="Effects",cex.lab=1.5)
#
t = TS[,1] + 19
lines(t,ddx.rhat_pred[,1]*0,lty=2)
lines(t,ddx.rhat_pred[,1+(i-1)*N],col="green")
lines(t,ddx.rhat_pred[,2+(i-1)*N],col="blue")
lines(t,ddx.rhat_pred[,3+(i-1)*N],col="red")
#
t = t_true
lines(t,ddx.rhat_true[,1+(i-1)*N],col="green",lty=2)
lines(t,ddx.rhat_true[,2+(i-1)*N],col="blue",lty=2)
lines(t,ddx.rhat_true[,3+(i-1)*N],col="red",lty=2)
#
legend("bottom",legend=colnames(TS)[-1],col=colVect,lty=1,horiz=T,bty="n")
#
## geber
plot(1:10,xlim=c(20,50)-1,ylim=c(-1,1),cex=0,xlab="Time",ylab="Contributions",cex.lab=1.5)
#
t = TS[,1] + 19
lines(t,geber_pred[,1]*0,lty=2)
lines(t,geber_pred[,1+(i-1)*N],col="green")
lines(t,geber_pred[,2+(i-1)*N],col="blue")
lines(t,geber_pred[,3+(i-1)*N],col="red")
#
legend("bottom",legend=colnames(TS)[-1],col=colVect,lty=1,horiz=T,bty="n")
}
par(mfrow=c(1,1))
#
dev.off()
#
###
############
## OUTPUT ##
############
## goal: store results
## save predictions
results_ODE2 = list("t"=TS[,1]+19, "Yhat_p"=rhat_pred, "ddx.Yhat_p"=ddx.rhat_pred, "Geber_p"=geber_pred)
save(results_ODE2,file=paste(output,"/results_ODE2.RData",sep=""))
Ybar_ensemble$f_ensemble
dim(Ybar_ensemble$f_ensemble)
which(is.na(Ybar_ensemble$f_ensemble))
which(is.na(Ybar_ensemble$f_ensemble[,ncol(Ybar_ensemble$f_ensemble)]))
which(chainList_thinned[[1]][,1] == max(chainList_thinned[[1]][,1]))
which(is.na(Ybar_ensemble$f_ensemble[,ncol(Ybar_ensemble$f_ensemble)]))
## avoid na on test set
s = which(is.na(Ybar_ensemble$f_ensemble[,ncol(Ybar_ensemble$f_ensemble)]))
chainList_thinned[[1]] = chainList_thinned[[1]][-s,]
MaP  = as.numeric(chainList.argmaxPost(chainList_thinned))
Y_0  = MaP[idx_Y_0()]
Beta = MaP[idx_Beta()]
Ybar_MaP = model.predict(times = TS[,1], Y_0 = Y_0, Beta = Beta)
Ybar_MaP
par(mfrow=c(1,1),mar=c(5,5,0,0),oma=c(0,0,1,1))
#
colVect = c("green","blue","red")
plot(TS[,1],TS[,2], pch=16, ylim=c(0,3), cex=0,xlab="Time",ylab="Density")
for(i in 2:4)
{
points(TS[,1],TS[,i], pch=16, col=colVect[i-1])
polygon(x=c(Ybar_q05[,1],rev(Ybar_q05[,1])), y=c(Ybar_q05[,i],rev(Ybar_q95[,i])), border=NA, col=grey(0.75,alpha=0.5))
lines(Ybar_MaP[,1],Ybar_MaP[,i], col=colVect[i-1],lty=2)
lines(Ybar_mean[,1],Ybar_mean[,i], col=colVect[i-1])
}
legend("top",legend=colnames(TS)[-1],col=colVect,lty=1,horiz=T,bty="n")
#
par(mfrow=c(1,1))
## figure
pdf(paste(output,"/fit.pdf",sep=""))
#
par(mfrow=c(1,1),mar=c(5,5,0,0),oma=c(0,0,1,1))
#
colVect = c("green","blue","red")
plot(TS[,1],TS[,2], pch=16, ylim=c(0,3), cex=0,xlab="Time",ylab="Density")
for(i in 2:4)
{
points(TS[,1],TS[,i], pch=16, col=colVect[i-1])
polygon(x=c(Ybar_q05[,1],rev(Ybar_q05[,1])), y=c(Ybar_q05[,i],rev(Ybar_q95[,i])), border=NA, col=grey(0.75,alpha=0.5))
lines(Ybar_MaP[,1],Ybar_MaP[,i], col=colVect[i-1],lty=2)
lines(Ybar_mean[,1],Ybar_mean[,i], col=colVect[i-1])
}
legend("top",legend=colnames(TS)[-1],col=colVect,lty=1,horiz=T,bty="n")
#
par(mfrow=c(1,1))
#
dev.off()
## compute per-capita growth rate effects and contributions
rhat_pred     = t(apply(Ybar_MaP, 1, function(x) 1/x[-1] * unlist(model.dYdt(t = x[1], Y = x[-1], Beta = MaP[idx_Beta()]))))
ddx.rhat_pred = t(apply(Ybar_MaP, 1, function(x) model.ddx.dYdt(t = x[1], Y = x[-1], Beta = MaP[idx_Beta()])))
geber_pred    = t(apply(Ybar_MaP, 1, function(x) model.ddx.dYdt(t = x[1], Y = x[-1], Beta = MaP[idx_Beta()]) * unlist(model.dYdt(t = x[1], Y = x[-1], Beta = MaP[idx_Beta()]))))
layout(mat = matrix(1:(N*3),nrow=3))
colVect = c("green","blue","red")
#
for(i in 1:N)
{
## per-capita growth rate
plot(1:10,xlim=c(20,50)-1,ylim=c(-1,1),cex=0,xlab="Time",ylab="Growth rate",cex.lab=1.5)
#
t = TS[,1] + 19
lines(t,rhat_pred[,i],col=colVect[i])
#
t = t_true
lines(t,rhat_true[,i],col=colVect[i],lty=2)
#
## effects
plot(1:10,xlim=c(20,50)-1,ylim=c(-1,1)*3,cex=0,xlab="Time",ylab="Effects",cex.lab=1.5)
#
t = TS[,1] + 19
lines(t,ddx.rhat_pred[,1]*0,lty=2)
lines(t,ddx.rhat_pred[,1+(i-1)*N],col="green")
lines(t,ddx.rhat_pred[,2+(i-1)*N],col="blue")
lines(t,ddx.rhat_pred[,3+(i-1)*N],col="red")
#
t = t_true
lines(t,ddx.rhat_true[,1+(i-1)*N],col="green",lty=2)
lines(t,ddx.rhat_true[,2+(i-1)*N],col="blue",lty=2)
lines(t,ddx.rhat_true[,3+(i-1)*N],col="red",lty=2)
#
legend("bottom",legend=colnames(TS)[-1],col=colVect,lty=1,horiz=T,bty="n")
#
## geber
plot(1:10,xlim=c(20,50)-1,ylim=c(-1,1),cex=0,xlab="Time",ylab="Contributions",cex.lab=1.5)
#
t = TS[,1] + 19
lines(t,geber_pred[,1]*0,lty=2)
lines(t,geber_pred[,1+(i-1)*N],col="green")
lines(t,geber_pred[,2+(i-1)*N],col="blue")
lines(t,geber_pred[,3+(i-1)*N],col="red")
#
legend("bottom",legend=colnames(TS)[-1],col=colVect,lty=1,horiz=T,bty="n")
}
par(mfrow=c(1,1))
#
## compute per-capita growth rate effects and contributions
rhat_pred     = t(apply(Ybar_MaP, 1, function(x) 1/x[-1] * unlist(model.dYdt(t = x[1], Y = x[-1], Beta = MaP[idx_Beta()]))))
ddx.rhat_pred = t(apply(Ybar_MaP, 1, function(x) model.ddx.dYdt(t = x[1], Y = x[-1], Beta = MaP[idx_Beta()])))
geber_pred    = t(apply(Ybar_MaP, 1, function(x) model.ddx.dYdt(t = x[1], Y = x[-1], Beta = MaP[idx_Beta()]) * unlist(model.dYdt(t = x[1], Y = x[-1], Beta = MaP[idx_Beta()]))))
## figure
pdf(paste(output,"/effects.pdf",sep=""))
#
layout(mat = matrix(1:(N*3),nrow=3))
colVect = c("green","blue","red")
#
for(i in 1:N)
{
## per-capita growth rate
plot(1:10,xlim=c(20,50)-1,ylim=c(-1,1),cex=0,xlab="Time",ylab="Growth rate",cex.lab=1.5)
#
t = TS[,1] + 19
lines(t,rhat_pred[,i],col=colVect[i])
#
t = t_true
lines(t,rhat_true[,i],col=colVect[i],lty=2)
#
## effects
plot(1:10,xlim=c(20,50)-1,ylim=c(-1,1)*3,cex=0,xlab="Time",ylab="Effects",cex.lab=1.5)
#
t = TS[,1] + 19
lines(t,ddx.rhat_pred[,1]*0,lty=2)
lines(t,ddx.rhat_pred[,1+(i-1)*N],col="green")
lines(t,ddx.rhat_pred[,2+(i-1)*N],col="blue")
lines(t,ddx.rhat_pred[,3+(i-1)*N],col="red")
#
t = t_true
lines(t,ddx.rhat_true[,1+(i-1)*N],col="green",lty=2)
lines(t,ddx.rhat_true[,2+(i-1)*N],col="blue",lty=2)
lines(t,ddx.rhat_true[,3+(i-1)*N],col="red",lty=2)
#
legend("bottom",legend=colnames(TS)[-1],col=colVect,lty=1,horiz=T,bty="n")
#
## geber
plot(1:10,xlim=c(20,50)-1,ylim=c(-1,1),cex=0,xlab="Time",ylab="Contributions",cex.lab=1.5)
#
t = TS[,1] + 19
lines(t,geber_pred[,1]*0,lty=2)
lines(t,geber_pred[,1+(i-1)*N],col="green")
lines(t,geber_pred[,2+(i-1)*N],col="blue")
lines(t,geber_pred[,3+(i-1)*N],col="red")
#
legend("bottom",legend=colnames(TS)[-1],col=colVect,lty=1,horiz=T,bty="n")
}
par(mfrow=c(1,1))
#
dev.off()
## save predictions
results_ODE2 = list("t"=TS[,1]+19, "Yhat_p"=rhat_pred, "ddx.Yhat_p"=ddx.rhat_pred, "Geber_p"=geber_pred)
save(results_ODE2,file=paste(output,"/results_ODE2.RData",sep=""))
setwd("~/Documents/GitHub/NODERGM/examples/Bonnaffe_2022/MEE/v0_0/figures/scripts/NODE_GM_benchmark")
#####################
## FUNCTIONS PLOTS ##
#####################
## .plot.DIN
## goal: plot the dynamical interaction network of the system
# effectsMat - matrix - matrix of pairwise effects between system variables (e.g. row 1 col 2 is the effect of variable 2 on variable 1)
# weightsMat - matrix - matrix of pairwise weights of the effects between system variables (e.g. row 1 col 2 corresponds to the contribution of variable 2 on variable 1)
# labels     - vector - vector of the names of the variables in the matrix
.plot.DIN = function(effectsMat,weightsMat,labels,main="")
{
## dimensions
N = dim(effectsMat)[1]
## scale effects and contributions
effectsMat = (effectsMat>0)*1
# weightsMat = weightsMat/sum(weightsMat) # proportion of total change
## angles
theta = seq(0,2*pi,(2*pi)/N)
x = cos(theta)
y = sin(theta)
x_ = cos(theta+(2*pi*0.05))
y_ = sin(theta+(2*pi*0.05))
x__ = 1.25*cos(theta+(2*pi*0.025))
y__ = 1.25*sin(theta+(2*pi*0.025))
## plot interactions
plot(x=c(-1:1)*2,y=c(-1:1)*2,cex=0,bty="n",xaxt="n",yaxt="n",xlab="",ylab="",main=main)
for(i in 1:N)
{
points(x[i],y[i],pch=16)
for(j in 1:N)
{
color_ = if(effectsMat[i,j]>0){"green"}else{"red"}
# points(x__[i],y__[i],cex=30/N)
text(x__[i],y__[i],labels=labels[i])
if(weightsMat[i,j]*10>0)
{
arrows(x0=x[j],x1=x_[i],y0=y[j],y1=y_[i],lwd=weightsMat[i,j]*10,col=color_,length=0.1)
}
}
}
}
#
###
######################
## LOAD TIME SERIES ##
######################
## goal: load time series
## load data
TS = as.matrix(read.table("NODEBNGM/data/TS_3DLV.csv",sep=";",header=T))
TS = TS[20:50,]
TS[,1] = TS[,1]-min(TS[,1])
N = ncol(TS) - 1
## load results
load("NODEBNGM/out/results_NODEBNGM.RData")
load("NODE/out/results_NODE.RData")
load("ODE2/out/results_ODE2.RData")
load("CCM/out/results_CCM.RData")
## remove extra time step in CCM
s = length(results_CCM$t)
results_CCM$t = results_CCM$t[-s]
results_CCM$Yhat_p = results_CCM$Yhat_p[-s,]
results_CCM$ddx.Yhat_p = results_CCM$ddx.Yhat_p[-s,]
results_CCM$Geber_p = results_CCM$Geber_p[-s,]
## load ground truth
load("NODEBNGM/data/GT_3DLV.RData")
t_true = LV_GT$t_true
ddt.Yhat_true = LV_GT$ddt.Yhat_true
rhat_true = 1/LV_GT$Yhat_true*LV_GT$ddt.Yhat_true
ddx.rhat_true = LV_GT$ddx.rhat_true
Geber_true = cbind(ddt.Yhat_true,ddt.Yhat_true,ddt.Yhat_true) * ddx.rhat_true
## match time steps in ground truth to predictions
s = match(results_NODEBNGM$t,t_true)
t_true = t_true[s]
ddt.Yhat_true = ddt.Yhat_true[s,]
rhat_true = rhat_true[s,]
ddx.rhat_true = ddx.rhat_true[s,]
Geber_true = Geber_true[s,]
## list results
GT = list("t"=t_true, "Yhat_p"=rhat_true, "ddx.Yhat_p"=ddx.rhat_true, "Geber_p"=Geber_true)
results = list("GT"=GT,"NODEBNGM"=results_NODEBNGM, "NODE"=results_NODE, "ODE2"=results_ODE2, "CCM"=results_CCM)
## split training and test set
s = 1:20
results_train = results_test = results
for(k in 1:5)
{
## train set
results_train[[k]]$t = results[[k]]$t[s]
results_train[[k]]$Yhat_p = results[[k]]$Yhat_p[s,]
results_train[[k]]$ddx.Yhat_p = results[[k]]$ddx.Yhat_p[s,]
## test set
results_test[[k]]$t = results[[k]]$t[-s]
results_test[[k]]$Yhat_p = results[[k]]$Yhat_p[-s,]
results_test[[k]]$ddx.Yhat_p = results[[k]]$ddx.Yhat_p[-s,]
}
## load runtimes
runtimes = list()
runtimes$GT = 0
read.table("NODEBNGM/out/runtimes_o.txt")
as.numeric(read.table("NODEBNGM/out/runtimes_o.txt"))
runtimes$NODEBNGM = mean(unlist(as.vector(read.table("NODEBNGM/out/runtimes_o.txt"))))*N + mean(unlist(as.vector(read.table("NODEBNGM/out/runtimes_p.txt"))))*N
runtimes$NODEBNGM
runtimes$NODE = mean(unlist(as.vector(read.table("NODE/out/runtimes.txt"))))
runtimes$NODE
runtimes$ODE2 = mean(unlist(as.vector(read.table("ODE2/out/runtimes.txt"))))
runtimes$CCM = mean(as.numeric(read.table("CCM/out/runtimes.txt")))*N
## goal: cross validation
source("m9_crossVal_p.r")
setwd("~/Documents/GitHub/NODERGM/examples/Bonnaffe_2022/MEE/v0_0/figures/scripts/NODE_GM_benchmark/NODEBNGM")
## goal: cross validation
source("m9_crossVal_p.r")
## goal: cross validation
source("m9_crossVal_p.r")
source("m10_plotCrossVal_p.r")
