x_ = cos(theta+(2*pi/N*0.25))
y_ = sin(theta+(2*pi/N*0.25))
x__ = 1.25*cos(theta+(2*pi/N*0.125))
y__ = 1.25*sin(theta+(2*pi/N*0.125))
## plot interactions
plot(x=c(-1:1)*1.5,y=c(-1:1)*1.5,cex=0,bty="n",xaxt="n",yaxt="n",xlab="",ylab="")
color_vector = adjustcolor(c("green","red"),alpha=0.5)
for(i in 1:N)
{
for(j in 1:N)
{
color_ = if(effectsMat[i,j]>0){color_vector[1]}else{color_vector[2]}
# points(x__[i],y__[i],cex=30/N)
text(x__[i],y__[i],labels=labels[i])
if(weightsMat[i,j]*10>0)
{
arrows(x0=x[j],x1=x_[i],y0=y[j],y1=y_[i],lwd=weightsMat[i,j]*10,col=color_,length=0.1)
}
}
}
points(x,y,pch=16)
points(x_,y_,pch=4)
legend("bottomleft",legend=c("Ingoing effects","Outgoing effects"),pch=c(4,16),lty=c(NA,NA),col=c("black","black"),cex=1.25,bty="n",horiz=F,lwd=2)
legend("bottomright",legend=c("Positive effects","Negative effects"),pch=c(NA,NA),lty=c(1,1),col=c(color_vector[1],color_vector[2]),cex=1.25,bty="n",horiz=F,lwd=2)
}
## visualise
pdf(paste(pathToOut,"/fig_DIN_v1.pdf",sep=""),width=10,height=10)
.plot.DIN(J,C,colnames(TS)[-1])
dev.off()
.plot.DIN2 = function(J,C,labels)
{
## graphical parameters
xlab = "Mean total effects"
ylab =  "Log mean total contributions"
x = apply(J,2,mean)
y = log(apply(C,2,mean))
delta_x = (max(x)-min(x))*0.1
color_vector = adjustcolor(c("green","red"),alpha=0.5)
#
## main plotting area
plot(x,y,xlim=c(min(x)-delta_x,max(x)+delta_x*1.5),cex=0,bty="n",xlab=xlab,ylab=ylab,cex.lab=1.5)
lines(c(0,0),c(-10,10),lty=2)
#
## interactions
for(i in 1:N)
{
for(j in 1:N)
{
colour = if (J[i,j] >= 0) color_vector[1] else color_vector[2]
line_width = C[i,j]*10
x_i = x[i]
x_j = x[j]
y_i = y[i]
y_j = y[j]
# if(C[i,j]*10>0) lines(x=c(x_i-delta_x/2,x_j),y=c(y_i,y_j),col=colour,lwd=line_width)
if(C[i,j]*10>0) arrows(x0=x_j, x1=x_i-delta_x/2, y0=y_j, y1=y_i, col=colour, lwd=line_width)
}
}
#
## legend
# points(x-delta_x/2,y,col=rainbow(N,start=0.1,end=0.9)[-1],pch=17,cex=2)
# points(x,        y,col=rainbow(N,start=0.1,end=0.9)[-1],pch=16,cex=2)
points(x-delta_x/2,y,pch=4,cex=2)
points(x,        y,pch=16,cex=2)
text(x+delta_x, y,labels = labels,cex=1.25)
legend("bottomleft",legend=c("Ingoing effects","Outgoing effects","Positive effects","Negative effects"),pch=c(4,16,NA,NA),lty=c(NA,NA,1,1),col=c("black","black",color_vector[1],color_vector[2]),cex=1.5,bty="n")
}
## plot
pdf(paste(pathToOut,"/fig_DIN_v2.pdf",sep=""),width=12,height=12)
.plot.DIN2(J,C,colnames(TS)[-1])
dev.off()
.plot.DIN = function(effectsMat,weightsMat,labels)
{
## dimensions
N = dim(effectsMat)[1]
## scale effects and contributions
effectsMat = (effectsMat>0)*1
# weightsMat = weightsMat/sum(weightsMat) # proportion of total change
## angles
theta = seq(0,2*pi,(2*pi)/N)
x = cos(theta)
y = sin(theta)
x_ = cos(theta+(2*pi/N*0.25))
y_ = sin(theta+(2*pi/N*0.25))
x__ = 1.25*cos(theta+(2*pi/N*0.125))
y__ = 1.25*sin(theta+(2*pi/N*0.125))
## plot interactions
plot(x=c(-1:1)*1.5,y=c(-1:1)*1.5,cex=0,bty="n",xaxt="n",yaxt="n",xlab="",ylab="")
color_vector = adjustcolor(c("green","red"),alpha=0.5)
for(i in 1:N)
{
for(j in 1:N)
{
color_ = if(effectsMat[i,j]>0){color_vector[1]}else{color_vector[2]}
# points(x__[i],y__[i],cex=30/N)
text(x__[i],y__[i],labels=labels[i])
if(weightsMat[i,j]*10>0)
{
arrows(x0=x[j],x1=x_[i],y0=y[j],y1=y_[i],lwd=weightsMat[i,j]*10,col=color_,length=0.1)
}
}
}
points(x,y,pch=16)
points(x_,y_,pch=4)
# legend("bottomleft",legend=c("Ingoing effects","Outgoing effects"),pch=c(4,16),lty=c(NA,NA),col=c("black","black"),cex=1.25,bty="n",horiz=F,lwd=2)
# legend("bottomright",legend=c("Positive effects","Negative effects"),pch=c(NA,NA),lty=c(1,1),col=c(color_vector[1],color_vector[2]),cex=1.25,bty="n",horiz=F,lwd=2)
legend("bottomleft",legend=c("Ingoing effects","Outgoing effects","Positive effects","Negative effects"),pch=c(4,16,15,15),lty=c(NA,NA,NA,NA),col=c("black","black",color_vector[1],color_vector[2]),cex=1.5,bty="n",horiz=T)
}
## visualise
pdf(paste(pathToOut,"/fig_DIN_v1.pdf",sep=""),width=10,height=10)
.plot.DIN(J,C,colnames(TS)[-1])
dev.off()
.plot.DIN = function(effectsMat,weightsMat,labels)
{
## dimensions
N = dim(effectsMat)[1]
## scale effects and contributions
effectsMat = (effectsMat>0)*1
# weightsMat = weightsMat/sum(weightsMat) # proportion of total change
## angles
theta = seq(0,2*pi,(2*pi)/N)
x = cos(theta)
y = sin(theta)
x_ = cos(theta+(2*pi/N*0.25))
y_ = sin(theta+(2*pi/N*0.25))
x__ = 1.25*cos(theta+(2*pi/N*0.125))
y__ = 1.25*sin(theta+(2*pi/N*0.125))
## plot interactions
plot(x=c(-1:1)*1.5,y=c(-1:1)*1.5,cex=0,bty="n",xaxt="n",yaxt="n",xlab="",ylab="")
color_vector = adjustcolor(c("green","red"),alpha=0.5)
for(i in 1:N)
{
for(j in 1:N)
{
color_ = if(effectsMat[i,j]>0){color_vector[1]}else{color_vector[2]}
# points(x__[i],y__[i],cex=30/N)
text(x__[i],y__[i],labels=labels[i])
if(weightsMat[i,j]*10>0)
{
arrows(x0=x[j],x1=x_[i],y0=y[j],y1=y_[i],lwd=weightsMat[i,j]*10,col=color_,length=0.1)
}
}
}
points(x,y,pch=16)
points(x_,y_,pch=4)
# legend("bottomleft",legend=c("Ingoing effects","Outgoing effects"),pch=c(4,16),lty=c(NA,NA),col=c("black","black"),cex=1.25,bty="n",horiz=F,lwd=2)
# legend("bottomright",legend=c("Positive effects","Negative effects"),pch=c(NA,NA),lty=c(1,1),col=c(color_vector[1],color_vector[2]),cex=1.25,bty="n",horiz=F,lwd=2)
legend("bottomleft",legend=c("Ingoing effects","Outgoing effects","Positive effects","Negative effects"),pch=c(4,16,15,15),col=c("black","black",color_vector[1],color_vector[2]),cex=1.5,bty="n",horiz=T)
}
## visualise
pdf(paste(pathToOut,"/fig_DIN_v1.pdf",sep=""),width=10,height=10)
.plot.DIN(J,C,colnames(TS)[-1])
dev.off()
.plot.DIN = function(effectsMat,weightsMat,labels)
{
## dimensions
N = dim(effectsMat)[1]
## scale effects and contributions
effectsMat = (effectsMat>0)*1
# weightsMat = weightsMat/sum(weightsMat) # proportion of total change
## angles
theta = seq(0,2*pi,(2*pi)/N)
x = cos(theta)
y = sin(theta)
x_ = cos(theta+(2*pi/N*0.25))
y_ = sin(theta+(2*pi/N*0.25))
x__ = 1.25*cos(theta+(2*pi/N*0.125))
y__ = 1.25*sin(theta+(2*pi/N*0.125))
## plot interactions
plot(x=c(-1:1)*1.5,y=c(-1:1)*1.5,cex=0,bty="n",xaxt="n",yaxt="n",xlab="",ylab="")
color_vector = adjustcolor(c("green","red"),alpha=0.5)
for(i in 1:N)
{
for(j in 1:N)
{
color_ = if(effectsMat[i,j]>0){color_vector[1]}else{color_vector[2]}
# points(x__[i],y__[i],cex=30/N)
text(x__[i],y__[i],labels=labels[i])
if(weightsMat[i,j]*10>0)
{
arrows(x0=x[j],x1=x_[i],y0=y[j],y1=y_[i],lwd=weightsMat[i,j]*10,col=color_,length=0.1)
}
}
}
points(x,y,pch=16)
points(x_,y_,pch=4)
# legend("bottomleft",legend=c("Ingoing effects","Outgoing effects"),pch=c(4,16),lty=c(NA,NA),col=c("black","black"),cex=1.25,bty="n",horiz=F,lwd=2)
# legend("bottomright",legend=c("Positive effects","Negative effects"),pch=c(NA,NA),lty=c(1,1),col=c(color_vector[1],color_vector[2]),cex=1.25,bty="n",horiz=F,lwd=2)
legend("bottomleft",legend=c("Ingoing effects","Outgoing effects","Positive effects","Negative effects"),pch=c(4,16,15,15),col=c("black","black",color_vector[1],color_vector[2]),cex=1.25,bty="n",horiz=T)
}
## visualise
pdf(paste(pathToOut,"/fig_DIN_v1.pdf",sep=""),width=10,height=10)
.plot.DIN(J,C,colnames(TS)[-1])
dev.off()
.plot.DIN = function(effectsMat,weightsMat,labels)
{
## dimensions
N = dim(effectsMat)[1]
## scale effects and contributions
effectsMat = (effectsMat>0)*1
# weightsMat = weightsMat/sum(weightsMat) # proportion of total change
## angles
theta = seq(0,2*pi,(2*pi)/N)
x = cos(theta)
y = sin(theta)
x_ = cos(theta+(2*pi/N*0.25))
y_ = sin(theta+(2*pi/N*0.25))
x__ = 1.25*cos(theta+(2*pi/N*0.125))
y__ = 1.25*sin(theta+(2*pi/N*0.125))
## plot interactions
plot(x=c(-1:1)*1.5,y=c(-1:1)*1.5,cex=0,bty="n",xaxt="n",yaxt="n",xlab="",ylab="")
color_vector = adjustcolor(c("green","red"),alpha=0.5)
for(i in 1:N)
{
for(j in 1:N)
{
color_ = if(effectsMat[i,j]>0){color_vector[1]}else{color_vector[2]}
# points(x__[i],y__[i],cex=30/N)
text(x__[i],y__[i],labels=labels[i])
if(weightsMat[i,j]*10>0)
{
arrows(x0=x[j],x1=x_[i],y0=y[j],y1=y_[i],lwd=weightsMat[i,j]*10,col=color_,length=0.1)
}
}
}
points(x,y,pch=16)
points(x_,y_,pch=4)
# legend("bottomleft",legend=c("Ingoing effects","Outgoing effects"),pch=c(4,16),lty=c(NA,NA),col=c("black","black"),cex=1.25,bty="n",horiz=F,lwd=2)
# legend("bottomright",legend=c("Positive effects","Negative effects"),pch=c(NA,NA),lty=c(1,1),col=c(color_vector[1],color_vector[2]),cex=1.25,bty="n",horiz=F,lwd=2)
legend("bottom",legend=c("Ingoing effects","Outgoing effects","Positive effects","Negative effects"),pch=c(4,16,15,15),col=c("black","black",color_vector[1],color_vector[2]),cex=1.25,bty="n",horiz=T)
}
## visualise
pdf(paste(pathToOut,"/fig_DIN_v1.pdf",sep=""),width=10,height=10)
.plot.DIN(J,C,colnames(TS)[-1])
dev.off()
J
## graphical parameters
xlab = "Mean total effects"
ylab =  "Log mean total contributions"
x = apply(J,2,mean)
y = log(apply(C,2,mean))
delta_x = (max(x)-min(x))*0.1
color_vector = adjustcolor(c("green","red"),alpha=0.5)
#
## main plotting area
plot(x,y,xlim=c(min(x)-delta_x,max(x)+delta_x*1.5),cex=0,bty="n",xlab=xlab,ylab=ylab,cex.lab=1.5)
lines(c(0,0),c(-10,10),lty=2)
dev.off()
xlab = "Mean total effects"
ylab =  "Log mean total contributions"
x = apply(J,2,mean)
y = log(apply(C,2,mean))
delta_x = (max(x)-min(x))*0.1
color_vector = adjustcolor(c("green","red"),alpha=0.5)
#
## main plotting area
plot(x,y,xlim=c(min(x)-delta_x,max(x)+delta_x*1.5),cex=0,bty="n",xlab=xlab,ylab=ylab,cex.lab=1.5)
lines(c(0,0),c(-10,10),lty=2)
N
## interactions
for(i in 1:N)
{
for(j in 1:N)
{
colour = if (J[i,j] >= 0) color_vector[1] else color_vector[2]
line_width = C[i,j]*10
x_i = x[i]
x_j = x[j]
y_i = y[i]
y_j = y[j]
# if(C[i,j]*10>0) lines(x=c(x_i-delta_x/2,x_j),y=c(y_i,y_j),col=colour,lwd=line_width)
if(C[i,j]*10>0) arrows(x0=x_j, x1=x_i-delta_x/2, y0=y_j, y1=y_i, col=colour, lwd=line_width)
}
}
#
## legend
# points(x-delta_x/2,y,col=rainbow(N,start=0.1,end=0.9)[-1],pch=17,cex=2)
# points(x,        y,col=rainbow(N,start=0.1,end=0.9)[-1],pch=16,cex=2)
points(x-delta_x/2,y,pch=4,cex=2)
points(x,        y,pch=16,cex=2)
text(x+delta_x, y,labels = labels,cex=1.25)
text(x+delta_x, y,labels = labels,cex=1.25)
labels = colnames(TS)[-1]
text(x+delta_x, y,labels = labels,cex=1.25)
legend("bottomleft",legend=c("Ingoing effects","Outgoing effects","Positive effects","Negative effects"),pch=c(4,16,NA,NA),lty=c(NA,NA,1,1),col=c("black","black",color_vector[1],color_vector[2]),cex=1.5,bty="n")
legend("topright",legend=c("Ingoing effects","Outgoing effects","Positive effects","Negative effects"),pch=c(4,16,NA,NA),lty=c(NA,NA,1,1),col=c("black","black",color_vector[1],color_vector[2]),cex=1.5,bty="n")
legend("topright",legend=c("Ingoing effects","Outgoing effects","Positive effects","Negative effects"),pch=c(4,16,NA,NA),lty=c(NA,NA,1,1),col=c("black","black",color_vector[1],color_vector[2]),cex=1.5,bty="n",bg="white")
legend("topright",legend=c("Ingoing effects","Outgoing effects","Positive effects","Negative effects"),pch=c(4,16,NA,NA),lty=c(NA,NA,1,1),col=c("black","black",color_vector[1],color_vector[2]),cex=1.5,bty="n",bg="white")
## main plotting area
plot(x,y,xlim=c(min(x)-delta_x,max(x)+delta_x*1.5),cex=0,bty="n",xlab=xlab,ylab=ylab,cex.lab=1.5)
lines(c(0,0),c(-10,10),lty=2)
#
## interactions
for(i in 1:N)
{
for(j in 1:N)
{
colour = if (J[i,j] >= 0) color_vector[1] else color_vector[2]
line_width = C[i,j]*10
x_i = x[i]
x_j = x[j]
y_i = y[i]
y_j = y[j]
# if(C[i,j]*10>0) lines(x=c(x_i-delta_x/2,x_j),y=c(y_i,y_j),col=colour,lwd=line_width)
if(C[i,j]*10>0) arrows(x0=x_j, x1=x_i-delta_x/2, y0=y_j, y1=y_i, col=colour, lwd=line_width)
}
}
#
## legend
# points(x-delta_x/2,y,col=rainbow(N,start=0.1,end=0.9)[-1],pch=17,cex=2)
# points(x,        y,col=rainbow(N,start=0.1,end=0.9)[-1],pch=16,cex=2)
points(x-delta_x/2,y,pch=4,cex=2)
points(x,        y,pch=16,cex=2)
text(x+delta_x, y,labels = labels,cex=1.25)
legend("topright",legend=c("Ingoing effects","Outgoing effects","Positive effects","Negative effects"),pch=c(4,16,NA,NA),lty=c(NA,NA,1,1),col=c("black","black",color_vector[1],color_vector[2]),cex=1.5,bty="n",bg="white")
help(legend)
plot(x,y,xlim=c(min(x)-delta_x,max(x)+delta_x*1.5),cex=0,bty="n",xlab=xlab,ylab=ylab,cex.lab=1.5)
lines(c(0,0),c(-10,10),lty=2)
#
## interactions
for(i in 1:N)
{
for(j in 1:N)
{
colour = if (J[i,j] >= 0) color_vector[1] else color_vector[2]
line_width = C[i,j]*10
x_i = x[i]
x_j = x[j]
y_i = y[i]
y_j = y[j]
# if(C[i,j]*10>0) lines(x=c(x_i-delta_x/2,x_j),y=c(y_i,y_j),col=colour,lwd=line_width)
if(C[i,j]*10>0) arrows(x0=x_j, x1=x_i-delta_x/2, y0=y_j, y1=y_i, col=colour, lwd=line_width)
}
}
#
## legend
# points(x-delta_x/2,y,col=rainbow(N,start=0.1,end=0.9)[-1],pch=17,cex=2)
# points(x,        y,col=rainbow(N,start=0.1,end=0.9)[-1],pch=16,cex=2)
points(x-delta_x/2,y,pch=4,cex=2)
points(x,        y,pch=16,cex=2)
text(x+delta_x, y,labels = labels,cex=1.25)
legend("topright",legend=c("Ingoing effects","Outgoing effects","Positive effects","Negative effects"),pch=c(4,16,NA,NA),lty=c(NA,NA,1,1),col=c("black","black",color_vector[1],color_vector[2]),cex=1.5,bg="white")
help(legend)
## main plotting area
plot(x,y,xlim=c(min(x)-delta_x,max(x)+delta_x*1.5),cex=0,bty="n",xlab=xlab,ylab=ylab,cex.lab=1.5)
lines(c(0,0),c(-10,10),lty=2)
#
## interactions
for(i in 1:N)
{
for(j in 1:N)
{
colour = if (J[i,j] >= 0) color_vector[1] else color_vector[2]
line_width = C[i,j]*10
x_i = x[i]
x_j = x[j]
y_i = y[i]
y_j = y[j]
# if(C[i,j]*10>0) lines(x=c(x_i-delta_x/2,x_j),y=c(y_i,y_j),col=colour,lwd=line_width)
if(C[i,j]*10>0) arrows(x0=x_j, x1=x_i-delta_x/2, y0=y_j, y1=y_i, col=colour, lwd=line_width)
}
}
#
## legend
# points(x-delta_x/2,y,col=rainbow(N,start=0.1,end=0.9)[-1],pch=17,cex=2)
# points(x,        y,col=rainbow(N,start=0.1,end=0.9)[-1],pch=16,cex=2)
points(x-delta_x/2,y,pch=4,cex=2)
points(x,        y,pch=16,cex=2)
text(x+delta_x, y,labels = labels,cex=1.25)
legend("topright",legend=c("Ingoing effects","Outgoing effects","Positive effects","Negative effects"),pch=c(4,16,NA,NA),lty=c(NA,NA,1,1),col=c("black","black",color_vector[1],color_vector[2]),cex=1.5,bg="white",box.col="white")
y
x
apply(C,2,mean)
## graphical parameters
xlab = "Mean total effects"
ylab =  "Log mean total contributions"
x = apply(J,2,mean)
y = log(apply(C,2,mean)+1)
delta_x = (max(x)-min(x))*0.1
color_vector = adjustcolor(c("green","red"),alpha=0.5)
#
## main plotting area
plot(x,y,xlim=c(min(x)-delta_x,max(x)+delta_x*1.5),cex=0,bty="n",xlab=xlab,ylab=ylab,cex.lab=1.5)
lines(c(0,0),c(-10,10),lty=2)
#
## interactions
for(i in 1:N)
{
for(j in 1:N)
{
colour = if (J[i,j] >= 0) color_vector[1] else color_vector[2]
line_width = C[i,j]*10
x_i = x[i]
x_j = x[j]
y_i = y[i]
y_j = y[j]
# if(C[i,j]*10>0) lines(x=c(x_i-delta_x/2,x_j),y=c(y_i,y_j),col=colour,lwd=line_width)
if(C[i,j]*10>0) arrows(x0=x_j, x1=x_i-delta_x/2, y0=y_j, y1=y_i, col=colour, lwd=line_width)
}
}
#
## legend
# points(x-delta_x/2,y,col=rainbow(N,start=0.1,end=0.9)[-1],pch=17,cex=2)
# points(x,        y,col=rainbow(N,start=0.1,end=0.9)[-1],pch=16,cex=2)
points(x-delta_x/2,y,pch=4,cex=2)
points(x,        y,pch=16,cex=2)
text(x+delta_x, y,labels = labels,cex=1.25)
legend("topright",legend=c("Ingoing effects","Outgoing effects","Positive effects","Negative effects"),pch=c(4,16,NA,NA),lty=c(NA,NA,1,1),col=c("black","black",color_vector[1],color_vector[2]),cex=1.5,bg="white",box.col="white")
.plot.DIN2 = function(J,C,labels)
{
## graphical parameters
xlab = "Mean total effects"
ylab =  "Log mean total contributions"
x = apply(J,2,mean)
y = log(apply(C,2,mean))
delta_x = (max(x)-min(x))*0.1
color_vector = adjustcolor(c("green","red"),alpha=0.5)
#
## main plotting area
plot(x,y,xlim=c(min(x)-delta_x,max(x)+delta_x*1.5),cex=0,bty="n",xlab=xlab,ylab=ylab,cex.lab=1.5)
lines(c(0,0),c(-10,10),lty=2)
#
## interactions
for(i in 1:N)
{
for(j in 1:N)
{
colour = if (J[i,j] >= 0) color_vector[1] else color_vector[2]
line_width = C[i,j]*10
x_i = x[i]
x_j = x[j]
y_i = y[i]
y_j = y[j]
# if(C[i,j]*10>0) lines(x=c(x_i-delta_x/2,x_j),y=c(y_i,y_j),col=colour,lwd=line_width)
if(C[i,j]*10>0) arrows(x0=x_j, x1=x_i-delta_x/2, y0=y_j, y1=y_i, col=colour, lwd=line_width)
}
}
#
## legend
# points(x-delta_x/2,y,col=rainbow(N,start=0.1,end=0.9)[-1],pch=17,cex=2)
# points(x,        y,col=rainbow(N,start=0.1,end=0.9)[-1],pch=16,cex=2)
points(x-delta_x/2,y,pch=4,cex=2)
points(x,        y,pch=16,cex=2)
text(x+delta_x, y,labels = labels,cex=1.25)
legend("topright",legend=c("Ingoing effects","Outgoing effects","Positive effects","Negative effects"),pch=c(4,16,NA,NA),lty=c(NA,NA,1,1),col=c("black","black",color_vector[1],color_vector[2]),cex=1.5,bg="white",box.col="white")
}
pdf(paste(pathToOut,"/fig_DIN_v2.pdf",sep=""),width=12,height=12)
.plot.DIN2(J,C,colnames(TS)[-1])
dev.off()
plotModel_o = function(TS,alpha_i,Yhat_o,ddt.Yhat_o)
{
## load data
attach(loadData_o(TS,alpha_i),warn.conflicts=F)
col   = (rainbow(N,start=0.1,end=0.9))
xlab  = c("","Time")
ylab  = c("Y(t)","dY/dt(t)")
index = NULL; for (i in 1:N) index = c(index,paste(i,c("a.","b."),sep=""))
par(mar=c(4,4.5,0,0),oma=c(1,1,1,1),cex.lab=1.5)
layout(cbind(c(1,2),c(3,4),c(5,6))[,1:min(3,N)])
for (i in 1:N)
{
## predictions
E.Yhat_o       = apply(Yhat_o[[i]],2,mean)
q05.Yhat_o     = apply(Yhat_o[[i]],2,quantile,p=0.05)
q95.Yhat_o     = apply(Yhat_o[[i]],2,quantile,p=0.95)
E.ddt.Yhat_o   = apply(ddt.Yhat_o[[i]],2,mean)
q05.ddt.Yhat_o = apply(ddt.Yhat_o[[i]],2,quantile,p=0.05)
q95.ddt.Yhat_o = apply(ddt.Yhat_o[[i]],2,quantile,p=0.95)
#
## training data
t = TS[,1]
Y = TS[,-1][,i]
nt = seq(min(t),max(t),(t[2]-t[1])/alpha_i)
#
## visualise interpolated response
plot(t,rep(0,length(t)),ylim=c(min(Y),max(Y))+c(-1,1)*0.2*(max(Y)-min(Y)),type="l",lty=3,xlab=xlab[1],ylab=if(i%%3 == 1)ylab[1]else"")
polygon(c(nt,rev(nt)),c(q05.Yhat_o,rev(q95.Yhat_o)),col=adjustcolor(col[i],alpha=0.25),border=NA)
points(t,Y,pch=16,col=adjustcolor("black",0.75))
lines(nt,E.Yhat_o,col=adjustcolor(col[i],0.75),lwd=2)
if(!is.null(index)) legend("topright",legend=index[1+(i-1)*2],bty="n",cex=1.5)
legend("bottom",legend=colnames(TS)[-1][i],lty=1,col=col[i],lwd=2,bty="n",horiz=T)
#
## visualise temporal derivative
plot(nt,rep(0,length(nt)),ylim=c(-1,1)*max(abs(E.ddt.Yhat_o))*2,type="l",lty=3,xlab=xlab[2],ylab=if(i%%3 == 1)ylab[2]else"")
polygon(c(nt,rev(nt)),c(q05.ddt.Yhat_o,rev(q95.ddt.Yhat_o)),col=adjustcolor(col[i],alpha=0.25),border=NA)
lines(nt,E.ddt.Yhat_o,col=adjustcolor(col[i],0.75),lwd=2)
if(!is.null(index)) legend("topright",legend=index[2+(i-1)*2],bty="n",cex=1.5)
legend("bottom",legend=colnames(TS)[-1][i],lty=1,col=col[i],lwd=2,bty="n",horiz=T)
}
par(mfrow=c(1,1))
}
## visualise observation model fit
pdf(paste(pathToOut,"/fig_predictions_o.pdf",sep=""))
plotModel_o(TS,alpha_i,Yhat_o,ddt.Yhat_o)
dev.off()
setwd("~/Documents/GitHub/NODERGM/examples/Bonnaffe_2022/MEE/v0_0/figures/scripts/NODE_GM_cmdline_b1_0_0_TS1")
n
## imports
source("f_NODE_GM.r")
source("m5_loadData_p.r")
setwd("~/Documents/GitHub/NODERGM/examples/Bonnaffe_2022/MEE/v0_0/figures/scripts/NODE_GM_cmdline_b1_0_0_TS1")
system.time(expr={
source("m3_trainModel_o.r");
})
source("m4_plotModel_o.r");
source("m4_plotModel_o.r");
n
(round(2/3*n))
(round(2/3*n)+1)
## parameters process model
t_train = 1:(round(2/3*n))
t_test  = (round(2/3*n)+1):n
