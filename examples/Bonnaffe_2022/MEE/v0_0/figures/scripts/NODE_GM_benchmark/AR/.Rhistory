# tmax = c(20,30,40,50,60)
timeVect[1] = system.time(
for(i in 1:length(tmax))
{
dTarget = function(x) dLogPost_wrapper(TS=TS[1:tmax[i],],x)
chainList[[1]] = DEMCOpp(list(dTarget = dTarget,
Theta_0 = Theta_0,
gamma   = 2.38/sqrt(2*N),
epsilon = 0.001,
lambda  = 100,
nIt     = 1000))[["chainList"]]
Theta_0 = chainList.argmaxPost(chainList)
model.plot(TS[1:tmax[i],],model.predict(Theta_0))
})[3]
MaP = chainList.argmaxPost(chainList)
chainList = list()
Theta_0 = initiate()
tmax    = seq(10,30,2)
# tmax = c(20,30,40,50,60)
timeVect[1] = system.time(
for(i in 1:length(tmax))
{
dTarget = function(x) dLogPost_wrapper(TS=TS[1:tmax[i],],x)
chainList[[1]] = DEMCOpp(list(dTarget = dTarget,
Theta_0 = Theta_0,
gamma   = 2.38/sqrt(2*N),
epsilon = 0.001,
lambda  = 100,
nIt     = 1000))[["chainList"]]
Theta_0 = chainList.argmaxPost(chainList)
model.plot(TS[1:tmax[i],],model.predict(Theta_0))
})[3]
MaP = chainList.argmaxPost(chainList)
## predictive function
Ybar = function(times, Y_0, dYdt, Beta)
{
Ybar = NULL
Y = Y_0
for(t in times)
{
Y = Y + dYdt(t,Y,Beta)
Ybar = rbind(Ybar,Y)
}
Ybar = cbind(times,exp(Ybar))
return(Ybar)
}
## benchmark
timeVect = c(0,0)
## RCpp implementation of DEMCO
chainList = list()
Theta_0 = initiate()
tmax    = seq(10,30,2)
# tmax = c(20,30,40,50,60)
timeVect[1] = system.time(
for(i in 1:length(tmax))
{
dTarget = function(x) dLogPost_wrapper(TS=TS[1:tmax[i],],x)
chainList[[1]] = DEMCOpp(list(dTarget = dTarget,
Theta_0 = Theta_0,
gamma   = 2.38/sqrt(2*N),
epsilon = 0.001,
lambda  = 100,
nIt     = 1000))[["chainList"]]
Theta_0 = chainList.argmaxPost(chainList)
model.plot(TS[1:tmax[i],],model.predict(Theta_0))
})[3]
MaP = chainList.argmaxPost(chainList)
## RCpp implementation of DEMCO
chainList = list()
Theta_0 = initiate()
tmax    = seq(10,30,2)
# tmax = c(20,30,40,50,60)
timeVect[1] = system.time(
for(i in 1:length(tmax))
{
dTarget = function(x) dLogPost_wrapper(TS=TS[1:tmax[i],],x)
chainList[[1]] = DEMCOpp(list(dTarget = dTarget,
Theta_0 = Theta_0,
gamma   = 2.38/sqrt(2*N),
epsilon = 0.001,
lambda  = 100,
nIt     = 1000))[["chainList"]]
Theta_0 = chainList.argmaxPost(chainList)
model.plot(TS[1:tmax[i],],model.predict(Theta_0))
})[3]
MaP = chainList.argmaxPost(chainList)
## RCpp implementation of DEMCO
chainList = list()
Theta_0 = initiate()
tmax    = seq(10,30,2)
# tmax = c(20,30,40,50,60)
timeVect[1] = system.time(
for(i in 1:length(tmax))
{
dTarget = function(x) dLogPost_wrapper(TS=TS[1:tmax[i],],x)
chainList[[1]] = DEMCOpp(list(dTarget = dTarget,
Theta_0 = Theta_0,
gamma   = 2.38/sqrt(2*N),
epsilon = 0.001,
lambda  = 100,
nIt     = 1000))[["chainList"]]
Theta_0 = chainList.argmaxPost(chainList)
model.plot(TS[1:tmax[i],],model.predict(Theta_0))
})[3]
MaP = chainList.argmaxPost(chainList)
## RCpp implementation of DEMCO
chainList = list()
Theta_0 = initiate()
tmax    = seq(10,30,2)
# tmax = c(20,30,40,50,60)
timeVect[1] = system.time(
for(i in 1:length(tmax))
{
dTarget = function(x) dLogPost_wrapper(TS=TS[1:tmax[i],],x)
chainList[[1]] = DEMCOpp(list(dTarget = dTarget,
Theta_0 = Theta_0,
gamma   = 2.38/sqrt(2*N),
epsilon = 0.01,
lambda  = 100,
nIt     = 1000))[["chainList"]]
Theta_0 = chainList.argmaxPost(chainList)
model.plot(TS[1:tmax[i],],model.predict(Theta_0))
})[3]
MaP = chainList.argmaxPost(chainList)
## RCpp implementation of DEMCO
chainList = list()
Theta_0 = initiate()
tmax    = seq(10,30,2)
# tmax = c(20,30,40,50,60)
timeVect[1] = system.time(
for(i in 1:length(tmax))
{
dTarget = function(x) dLogPost_wrapper(TS=TS[1:tmax[i],],x)
chainList[[1]] = DEMCOpp(list(dTarget = dTarget,
Theta_0 = Theta_0,
gamma   = 2.38/sqrt(2*N),
epsilon = 0.01,
lambda  = 100,
nIt     = 1000))[["chainList"]]
Theta_0 = chainList.argmaxPost(chainList)
model.plot(TS[1:tmax[i],],model.predict(Theta_0))
})[3]
MaP = chainList.argmaxPost(chainList)
## RCpp implementation of DEMCO
chainList = list()
Theta_0 = initiate()
tmax    = seq(10,30,2)
# tmax = c(20,30,40,50,60)
timeVect[1] = system.time(
for(i in 1:length(tmax))
{
dTarget = function(x) dLogPost_wrapper(TS=TS[1:tmax[i],],x)
chainList[[1]] = DEMCOpp(list(dTarget = dTarget,
Theta_0 = Theta_0,
gamma   = 2.38/sqrt(2*N),
epsilon = 0.01,
lambda  = 100,
nIt     = 1000))[["chainList"]]
Theta_0 = chainList.argmaxPost(chainList)
model.plot(TS[1:tmax[i],],model.predict(Theta_0))
})[3]
MaP = chainList.argmaxPost(chainList)
## RCpp implementation of DEMCO
chainList = list()
Theta_0 = initiate()
tmax    = seq(10,30,2)
# tmax = c(20,30,40,50,60)
timeVect[1] = system.time(
for(i in 1:length(tmax))
{
dTarget = function(x) dLogPost_wrapper(TS=TS[1:tmax[i],],x)
chainList[[1]] = DEMCOpp(list(dTarget = dTarget,
Theta_0 = Theta_0,
gamma   = 2.38/sqrt(2*N),
epsilon = 0.01,
lambda  = 100,
nIt     = 1000))[["chainList"]]
Theta_0 = chainList.argmaxPost(chainList)
model.plot(TS[1:tmax[i],],model.predict(Theta_0))
})[3]
MaP = chainList.argmaxPost(chainList)
## RCpp implementation of DEMCO
chainList = list()
Theta_0 = initiate()
tmax    = seq(10,30,2)
# tmax = c(20,30,40,50,60)
timeVect[1] = system.time(
for(i in 1:length(tmax))
{
dTarget = function(x) dLogPost_wrapper(TS=TS[1:tmax[i],],x)
chainList[[1]] = DEMCOpp(list(dTarget = dTarget,
Theta_0 = Theta_0,
gamma   = 2.38/sqrt(2*N),
epsilon = 0.01,
lambda  = 100,
nIt     = 1000))[["chainList"]]
Theta_0 = chainList.argmaxPost(chainList)
model.plot(TS[1:tmax[i],],model.predict(Theta_0))
})[3]
MaP = chainList.argmaxPost(chainList)
## RCpp implementation of DEMCO
chainList = list()
Theta_0 = initiate()
tmax    = seq(10,30,2)
# tmax = c(20,30,40,50,60)
timeVect[1] = system.time(
for(i in 1:length(tmax))
{
dTarget = function(x) dLogPost_wrapper(TS=TS[1:tmax[i],],x)
chainList[[1]] = DEMCOpp(list(dTarget = dTarget,
Theta_0 = Theta_0,
gamma   = 2.38/sqrt(2*N),
epsilon = 0.001,
lambda  = 100,
nIt     = 2000))[["chainList"]]
Theta_0 = chainList.argmaxPost(chainList)
model.plot(TS[1:tmax[i],],model.predict(Theta_0))
})[3]
MaP = chainList.argmaxPost(chainList)
## RCpp implementation of DEMCO
chainList = list()
Theta_0 = initiate()
tmax    = seq(10,30,2)
# tmax = c(20,30,40,50,60)
timeVect[1] = system.time(
for(i in 1:length(tmax))
{
dTarget = function(x) dLogPost_wrapper(TS=TS[1:tmax[i],],x)
chainList[[1]] = DEMCOpp(list(dTarget = dTarget,
Theta_0 = Theta_0,
gamma   = 2.38/sqrt(2*N),
epsilon = 0.001,
lambda  = 100,
nIt     = 2000))[["chainList"]]
Theta_0 = chainList.argmaxPost(chainList)
model.plot(TS[1:tmax[i],],model.predict(Theta_0))
})[3]
MaP = chainList.argmaxPost(chainList)
## RCpp implementation of DEMCO
chainList = list()
Theta_0 = initiate()
tmax    = seq(10,30,2)
# tmax = c(20,30,40,50,60)
timeVect[1] = system.time(
for(i in 1:length(tmax))
{
dTarget = function(x) dLogPost_wrapper(TS=TS[1:tmax[i],],x)
chainList[[1]] = DEMCOpp(list(dTarget = dTarget,
Theta_0 = Theta_0,
gamma   = 2.38/sqrt(2*N),
epsilon = 0.001,
lambda  = 100,
nIt     = 2000))[["chainList"]]
Theta_0 = chainList.argmaxPost(chainList)
model.plot(TS[1:tmax[i],],model.predict(Theta_0))
})[3]
MaP = chainList.argmaxPost(chainList)
## RCpp implementation of DEMCO
chainList = list()
Theta_0 = initiate()
tmax    = seq(10,30,2)
# tmax = c(20,30,40,50,60)
timeVect[1] = system.time(
for(i in 1:length(tmax))
{
dTarget = function(x) dLogPost_wrapper(TS=TS[1:tmax[i],],x)
chainList[[1]] = DEMCOpp(list(dTarget = dTarget,
Theta_0 = Theta_0,
gamma   = 2.38/sqrt(2*N),
epsilon = 0.001,
lambda  = 100,
nIt     = 2000))[["chainList"]]
Theta_0 = chainList.argmaxPost(chainList)
model.plot(TS[1:tmax[i],],model.predict(Theta_0))
})[3]
MaP = chainList.argmaxPost(chainList)
## RCpp implementation of DEMCO
chainList = list()
Theta_0 = initiate()
tmax    = seq(10,30,2)
# tmax = c(20,30,40,50,60)
timeVect[1] = system.time(
for(i in 1:length(tmax))
{
dTarget = function(x) dLogPost_wrapper(TS=TS[1:tmax[i],],x)
chainList[[1]] = DEMCOpp(list(dTarget = dTarget,
Theta_0 = Theta_0,
gamma   = 2.38/sqrt(2*N),
epsilon = 0.001,
lambda  = 100,
nIt     = 2000))[["chainList"]]
Theta_0 = chainList.argmaxPost(chainList)
model.plot(TS[1:tmax[i],],model.predict(Theta_0))
})[3]
MaP = chainList.argmaxPost(chainList)
## RCpp implementation of DEMCO
chainList = list()
Theta_0 = initiate()
tmax    = seq(10,30,2)
# tmax = c(20,30,40,50,60)
timeVect[1] = system.time(
for(i in 1:length(tmax))
{
dTarget = function(x) dLogPost_wrapper(TS=TS[1:tmax[i],],x)
chainList[[1]] = DEMCOpp(list(dTarget = dTarget,
Theta_0 = Theta_0,
gamma   = 2.38/sqrt(2*N),
epsilon = 0.001,
lambda  = 100,
nIt     = 2000))[["chainList"]]
Theta_0 = chainList.argmaxPost(chainList)
model.plot(TS[1:tmax[i],],model.predict(Theta_0))
})[3]
MaP = chainList.argmaxPost(chainList)
## predictive function
Ybar = function(times, Y_0, dYdt, Beta)
{
Ybar = NULL
Y = Y_0
for(t in times)
{
Y = Y + dYdt(t,Y,Beta)
Ybar = rbind(Ybar,Y)
}
Ybar = cbind(times,Ybar)
return(Ybar)
}
## benchmark
timeVect = c(0,0)
## RCpp implementation of DEMCO
chainList = list()
Theta_0 = initiate()
tmax    = seq(10,30,2)
# tmax = c(20,30,40,50,60)
timeVect[1] = system.time(
for(i in 1:length(tmax))
{
dTarget = function(x) dLogPost_wrapper(TS=TS[1:tmax[i],],x)
chainList[[1]] = DEMCOpp(list(dTarget = dTarget,
Theta_0 = Theta_0,
gamma   = 2.38/sqrt(2*N),
epsilon = 0.001,
lambda  = 100,
nIt     = 2000))[["chainList"]]
Theta_0 = chainList.argmaxPost(chainList)
model.plot(TS[1:tmax[i],],model.predict(Theta_0))
})[3]
MaP = chainList.argmaxPost(chainList)
## benchmark
timeVect = c(0,0)
## RCpp implementation of DEMCO
chainList = list()
Theta_0 = initiate()
tmax    = seq(10,30,2)
# tmax = c(20,30,40,50,60)
timeVect[1] = system.time(
for(i in 1:length(tmax))
{
dTarget = function(x) dLogPost_wrapper(TS=TS[1:tmax[i],],x)
chainList[[1]] = DEMCOpp(list(dTarget = dTarget,
Theta_0 = Theta_0,
gamma   = 2.38/sqrt(2*N),
epsilon = 0.001,
lambda  = 100,
nIt     = 2000))[["chainList"]]
Theta_0 = chainList.argmaxPost(chainList)
model.plot(TS[1:tmax[i],],model.predict(Theta_0))
})[3]
MaP = chainList.argmaxPost(chainList)
chainList = list()
Theta_0 = initiate()
tmax    = seq(10,30,1)
# tmax = c(20,30,40,50,60)
timeVect[1] = system.time(
for(i in 1:length(tmax))
{
dTarget = function(x) dLogPost_wrapper(TS=TS[1:tmax[i],],x)
chainList[[1]] = DEMCOpp(list(dTarget = dTarget,
Theta_0 = Theta_0,
gamma   = 2.38/sqrt(2*N),
epsilon = 0.001,
lambda  = 100,
nIt     = 2000))[["chainList"]]
Theta_0 = chainList.argmaxPost(chainList)
model.plot(TS[1:tmax[i],],model.predict(Theta_0))
})[3]
MaP = chainList.argmaxPost(chainList)
chainList = list()
Theta_0 = initiate()
tmax    = seq(10,30,1)
# tmax = c(20,30,40,50,60)
timeVect[1] = system.time(
for(i in 1:length(tmax))
{
dTarget = function(x) dLogPost_wrapper(TS=TS[1:tmax[i],],x)
chainList[[1]] = DEMCOpp(list(dTarget = dTarget,
Theta_0 = Theta_0,
gamma   = 2.38/sqrt(2*N),
epsilon = 0.001,
lambda  = 100,
nIt     = 2000))[["chainList"]]
Theta_0 = chainList.argmaxPost(chainList)
model.plot(TS[1:tmax[i],],model.predict(Theta_0))
})[3]
MaP = chainList.argmaxPost(chainList)
## RCpp implementation of DEMC
chainList = list()
timeVect = c(0)
Theta_0 = MaP
timeVect[2] = system.time(
for(i in 1:3)
{
# Theta_0 = initiate()
# Theta_0 = Theta_0
dTarget = function(x) dLogPost_wrapper(TS=TS,x)
chainList[[i]] = DEMCpp(list(dTarget = dTarget,
Theta_0 = Theta_0,
gamma   = 2.38/sqrt(2*N),
epsilon = 0.001,
nIt     = 10000))[["chainList"]]
})[3]
MaP = chainList.argmaxPost(chainList)
model.plot(TS,model.predict(MaP))
warnings()
## untransform
for(l in 1:length(chainList))
{
chainList[[l]][,-1][,idx_Y_0]  = exp(chainList[[l]][,-1][,idx_Y_0])
chainList[[l]][,-1][,idx_Sigma] = exp(chainList[[l]][,-1][,idx_Sigma])
chainList[[l]][,-1][,idx_Beta]  = chainList[[l]][,-1][,idx_Beta]
}
## RCpp implementation of DEMC
chainList = list()
timeVect = c(0)
Theta_0 = MaP
timeVect[2] = system.time(
for(i in 1:3)
{
# Theta_0 = initiate()
# Theta_0 = Theta_0
dTarget = function(x) dLogPost_wrapper(TS=TS,x)
chainList[[i]] = DEMCpp(list(dTarget = dTarget,
Theta_0 = Theta_0,
gamma   = 2.38/sqrt(2*N),
epsilon = 0.001,
nIt     = 10000))[["chainList"]]
})[3]
MaP = chainList.argmaxPost(chainList)
model.plot(TS,model.predict(MaP))
## untransform
for(l in 1:length(chainList))
{
chainList[[l]][,-1][,idx_Y_0]  = exp(chainList[[l]][,-1][,idx_Y_0])
chainList[[l]][,-1][,idx_Sigma] = exp(chainList[[l]][,-1][,idx_Sigma])
chainList[[l]][,-1][,idx_Beta]  = chainList[[l]][,-1][,idx_Beta]
}
## traces MC
burnin = c(1:5000)
chainList.tracePlot(chainList)
chainList.tracePlot(chainList.thin(chainList.burn(chainList,burnin)))
## plot posterior distribution DEMC
chainList.postPlot(chainList.thin(chainList.burn(chainList,burnin)),1000)
## ac plots MC
par(mfrow=c(3,4))
chainList.acPlot(chainList.burn(chainList,burnin))
par(mfrow=c(1,1))
## thin
chainList_thinned = chainList.thin(chainList.burn(chainList,burnin))
## MaP prediction
MaP  = as.numeric(chainList.argmaxPost(chainList_thinned))
Y_0  = MaP[idx_Y_0]
Beta = MaP[idx_Beta]
Ybar_MaP = Ybar(times = TS[,1], Y_0 = Y_0, dYdt = dYdt, Beta = Beta)
#
## ensemble predictions
Ybar_ensemble = chainList.apply(chainList_thinned,f = function(x) Ybar(times = TS[,1], Y_0 = x[-1][idx_Y_0], dYdt = dYdt, Beta = x[-1][idx_Beta]))
Ybar_q05 = matrix(Ybar_ensemble[[2]],ncol=N+1)
Ybar_q95 = matrix(Ybar_ensemble[[3]],ncol=N+1)
par(mfrow=c(1,1),mar=c(5,5,0,0),oma=c(0,0,1,1))
#
k = 1
mainVect =c("a.","b.")
colVect = rainbow(N)
plot(TS[,1],TS[,2], pch=16, ylim=c(0,max(TS[,-1])), cex=0,xlab="",ylab="Density")
for(i in 2:4)
{
points(TS[,1],TS[,i], pch=16, col=colVect[i-1])
polygon(x=c(Ybar_q05[,1],rev(Ybar_q05[,1])), y=c(Ybar_q05[,i],rev(Ybar_q95[,i])), border=NA, col=grey(0.75,alpha=0.5))
lines(Ybar_MaP[,1],Ybar_MaP[,i], col=colVect[i-1])
}
legend("top",legend=c("X","Y","Z"),col=colVect,lty=1,horiz=T,bty="n")
legend("topright",legend=mainVect[k],bty="n",cex=1.5)
k = k + 1
#
par(mfrow=c(1,1))
matrix(Beta,ncol=N)
Y
t(Y)
t(Y)%*%Y
Y%*%t(Y)
t(Y)
Beta
Y%*%t(Y)%*%Beta
Beta
Y%*%t(Y)%*%t(Beta)
Beta
Y%*%t(Y)%*%t(Beta)
Beta
Y%*%t(Y)
rep(Y%*%t(Y),N)
matrix(rep(Y%*%t(Y),N),N^2)
t(matrix(rep(Y%*%t(Y),N),N^2))
